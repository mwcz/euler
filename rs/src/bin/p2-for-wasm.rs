// Problem 2
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
// starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
// the sum of the even-valued terms.

#[no_mangle]
pub fn fib(n: u32) -> u32 {
    let mut f1: u32 = 0;
    let mut f2: u32 = 1;
    let mut ft: u32;
    let mut i: u32 = n - 1;

    while i > 0 {
        ft = f2;
        f2 = f1 + f2;
        f1 = ft;
        i -= 1;
    }

    return f2;
}

fn even(n: u32) -> bool {
    n % 2 == 0
}

#[no_mangle]
pub fn fibsum() -> u32 {
    let mut sum: u32 = 0;
    let mut f: u32 = 0;
    let mut i: u32 = 1;
    while f < 4000000 {
        if even(f) {
            sum += f;
        }
        f = fib(i);
        i += 1;
    }
    sum
}

fn main() {
    println!("{}", fibsum());
}
